datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int       @id @default(autoincrement())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  chatMessages   ChatMessage[]
  tasks          Task[]
  emails         Email[]
  calendarEvents CalendarEvent[]
  collatedDocs   CollatedDoc[]
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatMessage {
  id          Int      @id @default(autoincrement())
  userId      Int
  role        String    // <--- NEW: store "user" or "llm"
  messageText String
  llmResponse String?
  createdAt   DateTime @default(now())
  scopeId     String?  // can be a UUID string if needed
  tags        Json?
  user        User     @relation(fields: [userId], references: [id])
}

enum TaskStatus {
  YET_TO_BEGIN
  IN_PROGRESS
  DONE
}

model Task {
  id              Int       @id @default(autoincrement())
  userId          Int
  title           String
  description     String?
  dueDate         DateTime?
  status          TaskStatus
  priority        Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sourceMessageId Int?      // optional reference to a ChatMessage ID
  user            User      @relation(fields: [userId], references: [id])
}

model EmailThread {
  id          String   @id @default(cuid())
  threadId    String   @unique
  userId      Int
  subject     String?
  lastEmailAt DateTime
  emails      Email[]
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Email {
  id          String      @id @default(cuid())
  messageId   String      @unique
  userId      Int
  threadId    String
  snippet     String?
  subject     String?
  from        String?
  to          String?
  date        DateTime
  labels      String[]
  thread      EmailThread @relation(fields: [threadId], references: [threadId])
  user        User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([threadId])
}

model CalendarEvent {
  id              String   @id @default(cuid())
  eventId         String   @unique
  userId          String
  title           String?
  description     String?
  location        String?
  startTime       DateTime
  endTime         DateTime
  isRecurring     Boolean  @default(false)
  recurringEventId String?
  meetLink        String?
  attendees       String?  // JSON string of attendees
  status          String?
  createdAt       DateTime
  updatedAt       DateTime
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum DocType {
  MEETING
  BY_PRODUCT
  BY_PROJECT
}

model CollatedDoc {
  id             Int      @id @default(autoincrement())
  userId         Int
  docType        DocType
  title          String
  content        String   // store the full generated document text or structured JSON
  generatedForId Int?     // can reference a meeting or project ID
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Embedding {
  id              Int      @id @default(autoincrement())
  messageId       Int      // reference to ChatMessage, Email, or CalendarEvent
  embeddingVector Json
  createdAt       DateTime @default(now())
}
